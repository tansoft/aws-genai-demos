AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Browser resources for AgentCore'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
    
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the ECS cluster
    
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for the ECS cluster
    
  BrowserImage:
    Type: String
    Default: browserless/chrome:latest
    Description: Docker image for the headless browser

Resources:
  # ECS Cluster for browser
  BrowserCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'agentcore-browser-${Environment}'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub 'agentcore-browser-${Environment}'
        - Key: Environment
          Value: !Ref Environment
          
  # Task execution role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AgentCore-Browser-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub 'AgentCore-Browser-${Environment}'
        - Key: Environment
          Value: !Ref Environment
          
  # Task role with restricted permissions
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AgentCore-BrowserTask-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub 'AgentCore-BrowserTask-${Environment}'
        - Key: Environment
          Value: !Ref Environment
          
  # Security group for browser tasks
  BrowserSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'agentcore-browser-${Environment}'
      GroupDescription: Security group for browser tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: Allow inbound traffic to browserless/chrome
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub 'agentcore-browser-${Environment}'
        - Key: Environment
          Value: !Ref Environment
          
  # Browser task definition
  BrowserTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'agentcore-browser-${Environment}'
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: browser
          Image: !Ref BrowserImage
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BrowserLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: browser
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          Environment:
            - Name: MAX_CONCURRENT_SESSIONS
              Value: '10'
            - Name: CONNECTION_TIMEOUT
              Value: '300000'
            - Name: MAX_QUEUE_LENGTH
              Value: '10'
            - Name: ENABLE_DEBUGGER
              Value: 'false'
            - Name: ENABLE_CORS
              Value: 'true'
            - Name: WORKSPACE_DELETE_EXPIRED
              Value: 'true'
            - Name: WORKSPACE_EXPIRE_DAYS
              Value: '1'
            - Name: ENABLE_XVFB
              Value: 'true'
            - Name: CHROME_REFRESH_TIME
              Value: '3600000'
          LinuxParameters:
            Capabilities:
              Drop:
                - ALL
          
  # CloudWatch Log Group for browser
  BrowserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ecs/agentcore-browser-${Environment}'
      RetentionInDays: 7
      
  # ECS Service for browser
  BrowserService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub 'agentcore-browser-${Environment}'
      Cluster: !Ref BrowserCluster
      TaskDefinition: !Ref BrowserTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt BrowserSecurityGroup.GroupId
          Subnets: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Sub 'agentcore-browser-${Environment}'
        - Key: Environment
          Value: !Ref Environment
          
  # Lambda function for browser control
  BrowserControlFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'agentcore-browser-control-${Environment}'
      Handler: index.handler
      Role: !GetAtt BrowserControlFunctionRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const https = require('https');
          const http = require('http');
          
          exports.handler = async (event) => {
            console.log('Browser control request:', JSON.stringify(event));
            
            try {
              // Extract request parameters
              const { action, url, selector, xpath, value, cookies, headers } = event;
              
              if (!action) {
                throw new Error('Action is required');
              }
              
              // Get the browser service endpoint
              const ecs = new AWS.ECS();
              const ec2 = new AWS.EC2();
              
              const listTasksParams = {
                cluster: process.env.CLUSTER_ARN,
                serviceName: process.env.SERVICE_NAME,
              };
              
              const listTasksResult = await ecs.listTasks(listTasksParams).promise();
              
              if (!listTasksResult.taskArns || listTasksResult.taskArns.length === 0) {
                throw new Error('No browser tasks found');
              }
              
              const describeTasksParams = {
                cluster: process.env.CLUSTER_ARN,
                tasks: [listTasksResult.taskArns[0]],
              };
              
              const describeTasksResult = await ecs.describeTasks(describeTasksParams).promise();
              
              if (!describeTasksResult.tasks || describeTasksResult.tasks.length === 0) {
                throw new Error('Failed to describe browser task');
              }
              
              const task = describeTasksResult.tasks[0];
              const networkInterfaceId = task.attachments[0].details.find(d => d.name === 'networkInterfaceId').value;
              
              const describeNetworkInterfacesParams = {
                NetworkInterfaceIds: [networkInterfaceId],
              };
              
              const describeNetworkInterfacesResult = await ec2.describeNetworkInterfaces(describeNetworkInterfacesParams).promise();
              
              if (!describeNetworkInterfacesResult.NetworkInterfaces || describeNetworkInterfacesResult.NetworkInterfaces.length === 0) {
                throw new Error('Failed to describe network interface');
              }
              
              const publicIp = describeNetworkInterfacesResult.NetworkInterfaces[0].Association.PublicIp;
              
              if (!publicIp) {
                throw new Error('Browser task has no public IP');
              }
              
              const browserEndpoint = `http://${publicIp}:3000`;
              
              // Perform the requested action
              let result;
              
              switch (action) {
                case 'navigate':
                  if (!url) {
                    throw new Error('URL is required for navigate action');
                  }
                  
                  result = await sendRequest(browserEndpoint, 'POST', '/content', {
                    url,
                    gotoOptions: {
                      waitUntil: event.waitUntil || 'networkidle2',
                      timeout: event.timeout || 30000,
                    },
                    cookies,
                    headers,
                  });
                  
                  return {
                    url: result.url || url,
                    title: result.title || '',
                    content: result.content || '',
                    cookies: result.cookies || [],
                  };
                  
                case 'screenshot':
                  if (!url && !event.currentPage) {
                    throw new Error('URL or currentPage is required for screenshot action');
                  }
                  
                  result = await sendRequest(browserEndpoint, 'POST', '/screenshot', {
                    url: url || undefined,
                    options: {
                      fullPage: event.fullPage || false,
                      type: 'png',
                      encoding: 'base64',
                    },
                    cookies,
                    headers,
                  });
                  
                  return {
                    screenshot: result.data || '',
                  };
                  
                case 'pdf':
                  if (!url && !event.currentPage) {
                    throw new Error('URL or currentPage is required for pdf action');
                  }
                  
                  result = await sendRequest(browserEndpoint, 'POST', '/pdf', {
                    url: url || undefined,
                    options: {
                      printBackground: true,
                      format: 'A4',
                    },
                    cookies,
                    headers,
                  });
                  
                  return {
                    pdf: result.data || '',
                  };
                  
                default:
                  throw new Error(`Unsupported action: ${action}`);
              }
            } catch (error) {
              console.error('Error in browser control:', error);
              
              return {
                error: error.message,
              };
            }
          };
          
          async function sendRequest(endpoint, method, path, body) {
            return new Promise((resolve, reject) => {
              const options = {
                method,
                headers: {
                  'Content-Type': 'application/json',
                },
              };
              
              const url = `${endpoint}${path}`;
              const client = url.startsWith('https') ? https : http;
              
              const req = client.request(url, options, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                  data += chunk;
                });
                
                res.on('end', () => {
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    try {
                      resolve(JSON.parse(data));
                    } catch (error) {
                      resolve(data);
                    }
                  } else {
                    reject(new Error(`Request failed with status code ${res.statusCode}: ${data}`));
                  }
                });
              });
              
              req.on('error', (error) => {
                reject(error);
              });
              
              if (body) {
                req.write(JSON.stringify(body));
              }
              
              req.end();
            });
          }
      Runtime: nodejs18.x
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          CLUSTER_ARN: !GetAtt BrowserCluster.Arn
          SERVICE_NAME: !GetAtt BrowserService.Name
          
  # IAM Role for the Browser Control Lambda function
  BrowserControlFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AgentCore-BrowserControlFunction-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                Resource: '*'

Outputs:
  ClusterArn:
    Description: ARN of the ECS cluster
    Value: !GetAtt BrowserCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'
      
  ServiceName:
    Description: Name of the ECS service
    Value: !GetAtt BrowserService.Name
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'
      
  SecurityGroupId:
    Description: ID of the security group for browser tasks
    Value: !GetAtt BrowserSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'
      
  BrowserControlFunctionArn:
    Description: ARN of the browser control Lambda function
    Value: !GetAtt BrowserControlFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BrowserControlFunctionArn'