AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS AgentCore Observability Resources'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

  ServiceName:
    Type: String
    Default: aws-agentcore
    Description: Service name for resource naming

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: Number of days to retain logs

Resources:
  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${ServiceName}/${Environment}/logs'
      RetentionInDays: !Ref LogRetentionDays

  # CloudWatch Dashboard
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ServiceName}-${Environment}-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/AgentCore", "RequestCount", "Service", "${ServiceName}", "Environment", "${Environment}" ],
                  [ ".", "ErrorCount", ".", ".", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Requests and Errors",
                "period": 60,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/AgentCore", "Latency", "Service", "${ServiceName}", "Environment", "${Environment}", { "stat": "Average" } ],
                  [ "...", { "stat": "p90" } ],
                  [ "...", { "stat": "p99" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Latency",
                "period": 60
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/${ServiceName}/${Environment}/logs' | fields @timestamp, @message\n| filter @message like /ERROR/\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Error Logs",
                "view": "table"
              }
            }
          ]
        }

  # CloudWatch Alarm for Error Rate
  ErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ServiceName}-${Environment}-error-rate'
      AlarmDescription: !Sub 'Alarm when error rate exceeds threshold for ${ServiceName} in ${Environment}'
      MetricName: ErrorRate
      Namespace: AWS/AgentCore
      Dimensions:
        - Name: Service
          Value: !Ref ServiceName
        - Name: Environment
          Value: !Ref Environment
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  # IAM Role for X-Ray
  XRayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ServiceName}/${Environment}/logs:*'
        - PolicyName: CloudWatchMetricsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
                Condition:
                  StringEquals:
                    cloudwatch:namespace: AWS/AgentCore

Outputs:
  LogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref LogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'

  DashboardName:
    Description: CloudWatch Dashboard Name
    Value: !Ref Dashboard
    Export:
      Name: !Sub '${AWS::StackName}-DashboardName'

  XRayRoleArn:
    Description: IAM Role ARN for X-Ray access
    Value: !GetAtt XRayRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-XRayRoleArn'